#!/bin/bash
clear
# Start MongoDB and Go server
mongod >/dev/null 2>&1 &
sleep 5
go run main.go >/dev/null 2>&1 &
printf "Server starting...\n"

# Read login cred from credentials.txt
source testdata/loginCredentials.txt

# Check if all required credentials are available
if [[ -z "$name" || -z "$username" || -z "$password" || -z "$email" ]]; then
   echo "Credentials are missing in loginCredentials.txt. Exiting."
   exit 1
fi

# Perform login and save the response to credentials.txt
value=$(curl -s --location --request POST 'http://localhost:9000/users/login' \
   --header 'Content-Type: application/json' \
   --data-raw "{
    \"name\": \"$name\",
    \"username\": \"$username\",
    \"password\": \"$password\",
    \"email\": \"$email\",
    \"user_type\": \"ADMIN\"
}") &>testdata/waste.txt

echo "Login Response: $value"

# Check if login was successful
if [[ $(echo "$value" | jq -r '.token') != "null" ]]; then
   printf "\nLogin Successful......\n"

   # Extract token and user_id from response and save them to credentials.txt
   token=$(echo "$value" | jq -r '.token')
   id=$(echo "$value" | jq -r '.user_id')

   # Save the token and user_id to a file
   echo "token=$token" >testdata/credentials.txt
   echo "user_id=$id" >>testdata/credentials.txt
else
   echo "Login failed. Exiting."
   exit 1
fi

# Read token and user_id from credentials.txt
source testdata/credentials.txt

# Output the token and user_id from credentials file
printf "\nNow passing fresh token and id of the user to fetch the details......\n"

# Sending the GET request with the retrieved token and user_id
printf "\nSending Request- GET USER\n"
curl -s --location --request GET "http://localhost:9000/users/${user_id}" \
   --header "token: $token" \
   --data-raw '' | jq

printf "\nSending Request- GET ALL USER\n"
value=$(curl -s --location --request GET 'http://localhost:9000/users' \
   --header "token: $token" \
   --data-raw '' | jq)

echo "All Users $value"

# Kill all running app instances - cleanup
kill -9 $(lsof -i TCP:9000 | awk '/LISTEN/{print $2}')

source testdata/genre.txt

value=$(
   curl -s --location --request POST 'http://localhost:9000/genres/creategenre' \
      --header "token: $token" \
      --data-raw "{
         \"name\": \"$name\"
      }"
) &>testdata/waste.txt

echo "New Genre Added $value"

value=$(
   curl -s --location --request 'http://localhost:9000/genres/6736ab542113e7ada30379a6' \
      --header "token: $token"
) &>testdata/waste.txt

echo "Get genre $value"

echo "\nSending Fetch All Genres Request\n"

value=$(
   curl -s --location --request GET http://localhost:9000/genres \
      --header "token: $token" \
      --data-raw '' | jq
)

echo "Get All Genre $value"

value=$(
   curl --location --request PUT 'http://localhost:9000/genres/6736be9e1e8570f75e2b778f' \
      --header "token: $token" \
      --header 'Content-Type: application/json' \
      --data '{
    "name": "Science fiction"
}'
)

echo "Update Genre $value"

value=$(
   curl -s --location --request DELETE "http://localhost:9000/genres/{{genre_id}}" \
      --header "token: $token1" \
      --data-raw ''
)

echo "Delete Genre $value"

value=$(
   curl --location --request GET 'http://localhost:9000/genres/search-genre?genre-name=Com' \
      --header "token: $token" \
      --header 'Content-Type: application/json'
)

echo "Search Genres $value"

# Create Movie
value=$(
   curl --location 'http://localhost:9000/movies/create-movie' \
      --header "token: $token" \
      --header 'Content-Type: application/json' \
      --data '{
         "name": "Linconl Lawyer Season 2",
         "topic": "Law",
         "movie_url": "https://www.youtube.com/watch?v=IFwE3UgCMIk",
         "genre_id": "6736be9e1e8570f75e2b778f"
      }'
)

echo "Create Movie $value"

value=$(
   curl --location 'http://localhost:9000/movies/67454873f041dc584f45061b' \
      --header "token: $token"
)

echo "Get Movie $value"

# Get All Movies
value=$(
   curl --location 'http://localhost:9000/movies' \
      --header "token: $token"
)

echo "Get All Movies $value"

# Update Movie
value=$(
   curl --location --request PUT 'http://localhost:9000/movies/67454bf37aef74caf36ea59c' \
      --header "token: $token" \
      --header 'Content-Type: application/json' \
      --data '{
         "movie_url": "https://www.youtube.com/watch?v=IFwE3UgCMIk",
         "name": "Linconl Lawyer Season 3",
         "topic": "Law & Order"
      }'
)

echo "Update Movie $value"

# Search movie
value=$(
   curl --location 'http://localhost:9000/movies/search/Linconl' \
      --header "token: $token"
)

echo "Search Movie $value"

# Filter Movie
value=$(
   curl --location 'http://localhost:9000/movies/filter/6736' \
      --header "token: $token"
)

echo "Filter Movie $value"

# Delete Movie
value=$(
   curl --location --request DELETE "http://localhost:9000/movies/{{movie_id}}" \
      --header "token: $token"
)

echo "Delete Movie $value"

# Add Review
value=$(
   curl --location 'http://localhost:9000/review/add-review' \
      --header 'token: $token' \
      --header 'Content-Type: application/json' \
      --data '{
         "Movie_id": "1234",
         "Review": "Awesome watch!"
      }'
)

echo "Add Review $value"

# Filter Review
value=$(
   curl --location 'http://localhost:9000/review/filter/123' \
      --header "token: $token"
)

echo "Filter Review $value"

# Delete Review
value=$(
   curl --location --request DELETE 'http://localhost:9000/review/delete/1234' \
      --header "token: $token"
)

echo "Delete Review $value"
